{"version":3,"sources":["components/header.js","components/state.js","components/section.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","state","sections","pages","zoom","top","createRef","offsetContext","createContext","Section","children","offset","factor","props","useThree","size","viewport","useContext","viewportWidth","width","viewportHeight","height","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth","sectionHeight","aspect","useSection","parentOffset","ref","useRef","undefined","useFrame","curY","current","position","y","curTop","lerp","Provider","value","Model","modalPath","gltf","useGLTFLoader","object","scene","dispose","Lights","intensity","HTMLContent","bgColor","domContent","rotation","useInView","threshold","refItem","inView","useEffect","document","body","style","background","portal","fullscreen","App","scrollArea","onScroll","e","target","scrollTop","colorManagement","camera","fov","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1e3ceba.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header() {\n  return (\n    <header>\n      <div className='header-inner'>\n        <div className='logo'>CHAIR.</div>\n        <nav>\n          <ul>\n            <li>\n              <a href='/'>discover</a>\n            </li>\n            <li>\n              <a href='/'>products</a>\n            </li>\n            <li>\n              <a href='/'>solutions</a>\n            </li>\n            <li>\n              <a href='/'>reach</a>\n            </li>\n            <li className='btn'>\n              <a href='/'>order</a>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </header>\n  );\n}\n","import { createRef } from \"react\";\n\nconst state = {\n  sections: 3,\n  pages: 3,\n  zoom: 1,\n  top: createRef(),\n};\n\nexport default state;\n","import React, { createContext, useRef, useContext } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport lerp from \"lerp\";\nimport state from \"./state\";\n\nconst offsetContext = createContext(0);\n\nfunction Section({ children, offset, factor, ...props }) {\n  const { offset: parentOffset, sectionHeight, aspect } = useSection();\n  const ref = useRef();\n  offset = offset !== undefined ? offset : parentOffset;\n  useFrame(() => {\n    const curY = ref.current.position.y;\n    const curTop = state.top.current / aspect;\n    ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1);\n  });\n  return (\n    <offsetContext.Provider value={offset}>\n      <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n        <group ref={ref}>{children}</group>\n      </group>\n    </offsetContext.Provider>\n  );\n}\n\nfunction useSection() {\n  const { sections, pages, zoom } = state;\n  const { size, viewport } = useThree();\n  const offset = useContext(offsetContext);\n  const viewportWidth = viewport.width;\n  const viewportHeight = viewport.height;\n  const canvasWidth = viewportWidth / zoom;\n  const canvasHeight = viewportHeight / zoom;\n  const mobile = size.width < 700;\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1);\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6);\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1));\n  const aspect = size.height / viewportHeight;\n  return {\n    aspect,\n    viewport,\n    offset,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    mobile,\n    margin,\n    contentMaxWidth,\n    sectionHeight,\n  };\n}\n\nexport { Section, useSection };\n","import React, { Suspense, useEffect, useRef } from \"react\";\nimport \"./App.scss\";\n//Components\nimport Header from \"./components/header\";\nimport { Section } from \"./components/section\"\nimport { Canvas, useFrame } from \"react-three-fiber\"\nimport { Html, useGLTFLoader } from \"drei\"\n\n//page state\nimport state from \"./components/state\";\n\n//intersection observer\nimport { useInView } from \"react-intersection-observer\";\n\nconst Model = ({ modalPath }) => {\n  const gltf = useGLTFLoader(modalPath, true);\n  return <primitive object={gltf.scene} dispose={null} />;\n};\n\nconst Lights = () => {\n  return (\n    <>\n      <ambientLight intensity={0.3} />\n      <directionalLight position={[10, 30, 5]} intensity={0.6} />\n      <directionalLight position={[50, 100, 5]} intensity={0.8} />\n      {/* <spotLight position={[0 ,1000, 0]} intensity={0.2} />  */}\n    </>\n  )\n}\n\n\nconst HTMLContent = ({ bgColor, domContent, children, modalPath, position }) => {\n\n  const ref = useRef();\n  useFrame(() => (ref.current.rotation.y += 0.01));\n\n  const [refItem, inView] = useInView({\n    threshold: 0\n  });\n\n  useEffect(() => {\n    inView && (document.body.style.background = bgColor)\n  });\n\n  return (\n    <Section factor={1.5} offset={1}>\n      <group position={[position[0], position[1], position[2]]}>\n        <mesh ref={ref} position={[0, -30, 0]}>\n          <Model modalPath={modalPath} />\n        </mesh>\n        <Html portal={domContent} fullscreen>\n          <div className=\"container\" ref={refItem}>{children}</div>\n        </Html>\n      </group>\n    </Section>\n  );\n};\n\nexport default function App() {\n  const domContent = useRef();\n  const scrollArea = useRef();\n  const onScroll = (e) => (state.top.current = e.target.scrollTop);\n  useEffect(() => void onScroll({ target: scrollArea.current }), [])\n\n\n  return (\n    <>\n      <Header />\n      <Canvas colorManagement camera={{ position: [0, 0, 120], fov: 70 }}>\n        <Lights />\n        <Suspense fallback={null}>\n          <HTMLContent domContent={domContent} modalPath={'/armchairGreen.gltf'}\n            position={[0,250,0]} bgColor='#FBE7C6'>\n            <h1 className=\"title\">Hello?</h1>\n          </HTMLContent>\n          <HTMLContent domContent={domContent} modalPath={'/scene.gltf'}\n            position={[0,0,0]} bgColor={'#B4F8C8'}>\n            <h1 className=\"title\">Hey?</h1>\n          </HTMLContent>\n          <HTMLContent domContent={domContent} modalPath={'/armchairGray.gltf'}\n            position={[0,-250,0]} bgColor={'#A0E7E5'}>\n            <h1 className=\"title\">Sup?</h1>\n          </HTMLContent>\n        </Suspense>\n      </Canvas>\n      <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll}>\n        <div style={{ position: \"sticky\", top: 0 }} ref={domContent}></div>\n        <div style={{ height: `${state.sections * 100}vh` }}></div>\n      </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}